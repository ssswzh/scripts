#!/usr/bin/env python3
# Author: Hanyue (FilterBaseStat) & Zhangsiwen (MergeStatVcf)
# History:
#     20200604, manuscript
#     20200708, add variant DP, AD, AF in MergeStatVcf


import argparse
import sys

def GetArgs():
    parser = argparse.ArgumentParser(description='Pick SNVs in both base_stat result and vcf result with filter arguments.')
    parser.add_argument('--stat', dest='stat', help="base stat file, generated by tool mpileup2readcounts", required=True)
    parser.add_argument('--vcf', dest='vcf', help="vcf file", required=True)
    parser.add_argument('--depth', dest='depth', help="depth threshold (in basestat) that site to be kept, default [50]", default=50)
    parser.add_argument('--freq', dest='freq', help="frquency threshold (in basestat) that site to be kept, default [0.85]", default=0.85)
    parser.add_argument('--qual', dest='qual', help="quality threshold (in vcf) that site to be kept, default [20]", default=20)
    parser.add_argument('--out', dest='out', help='out vcf file prefix (with or without dir), will generate prefix.format.vcf and prefix.filter.vcf', required=True) 
    args = parser.parse_args()
    return args


def FilterBaseStat(statfile, outstat, depth, freq):
    outfile = open(outstat, "w")
    base_stat = {}
    outfile.write("chrom\tpos\tdepth\tref_base\tref_count\talt_base\talt_count\talt_freq\n")
    with open(statfile, "r") as fp:
        fp.readline()
        for line in fp:
            lst = line.strip().split("\t")
            chrom, pos, ref = lst[0], int(lst[1]), lst[3] 
            stat = {"A": int(lst[6]), "C": int(lst[7]), "G": int(lst[8]), "T": int(lst[9])} 
            cnt = sum(stat.values())
            if cnt < int(depth):  continue
            for base in stat:
                if base != ref and stat[base] / cnt >= float(freq):
                    record = "%s\t%d\t%d\t%c\t%d\t%c\t%d\t%.4f\n" % (chrom, pos, cnt, ref, stat[ref], base, stat[base], stat[base] / cnt)
                    outfile.write(record) 
                    key = ":".join([chrom, str(pos), ref, base])
                    base_stat[key] = record
    outfile.close()
    return base_stat


def MergeStatVcf(base_stat, vcf, out, quality, statfile, depth, freq):
    outfile = open(out, "w")
    for line in open(vcf):
        if line.startswith("##"):
            outfile.write(line)
        elif line.startswith("#CHROM"):
            outfile.write("##INFO=<ID=DP,Number=1,Type=Integer,Description=\"Read depth\"> \n")
            outfile.write("##INFO=<ID=AD,Number=1,Type=Integer,Description=\"Alternate allele depth\"> \n")
            outfile.write("##INFO=<ID=AF,Number=1,Type=Integer,Description=\"Alternate allele frequency\"> \n")
            outfile.write("##python %s --stat %s --vcf %s --depth %s --freq %s --qual %s --out %s \n" % (sys.argv[0], statfile, vcf, depth, freq, quality, out))
            outfile.write(line)
        else:
            record = line.strip().split("\t")
            chrom, pos, ref, alt, qual = record[0], record[1], record[3], record[4], float(record[5])
            if qual >= float(quality):
                if len(ref)==1 and len(alt)==1:
                    key = ":".join([chrom, pos, ref, alt])
                    if key in base_stat:
                        stat_info = base_stat[key].split("\t")
                        DP, AD, AF = "DP="+stat_info[2], "AD="+stat_info[6], "AF="+stat_info[7]
                        record[7] = ";".join([DP,AD,AF]).strip()
                        outfile.write("\t".join(record)+"\n")
                else:
                    outfile.write(line)
    outfile.close()


def main():
    args = GetArgs()
    filter_stat = args.out+".filter.txt"
    base_stat = FilterBaseStat(args.stat, filter_stat, args.depth, args.freq)
    filter_vcf = args.out+".filter.vcf"
    MergeStatVcf(base_stat, args.vcf, filter_vcf, args.qual, args.stat, args.depth, args.freq)
    

if __name__=="__main__":
    main()


